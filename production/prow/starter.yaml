# This file contains Kubernetes YAML files for the most important prow
# components. Don't edit resources in this file. Instead, pull them out into
# their own files.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: gitee-hook
  labels:
    app: gitee-hook
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: gitee-hook
  template:
    metadata:
      labels:
        app: gitee-hook
    spec:
      serviceAccountName: "gitee-hook"
      terminationGracePeriodSeconds: 180
      containers:
      - name: gitee-hook
        image: zengchen1024/gitee-hook:v20200228-31c76new10
        imagePullPolicy: Always
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: gitee
          mountPath: /etc/gitee
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 600
      volumes:
      - name: hmac
        secret:
          secretName: hmac-token
      - name: gitee
        secret:
          secretName: gitee-token
      - name: config
        configMap:
          name: common-config
      - name: plugins
        configMap:
          name: gitee-plugins
---
apiVersion: v1
kind: Service
metadata:
  namespace: prow
  name: gitee-hook
spec:
  selector:
    app: gitee-hook
  ports:
  - port: 8888
  type: NodePort
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prow
  name: "gitee-hook"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "gitee-hook"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - get
      - update
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "gitee-hook"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "gitee-hook"
subjects:
- kind: ServiceAccount
  name: "gitee-hook"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: prow
  name: hook
  labels:
    app: hook
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: hook
  template:
    metadata:
      labels:
        app: hook
    spec:
      serviceAccountName: "hook"
      terminationGracePeriodSeconds: 180
      containers:
      - name: hook
        image: zengchen1024/hook:v20200228-31c76new3
        imagePullPolicy: Always
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/jobs/config.yaml
        - --github-token-path=/etc/github/oauth
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
        - name: job
          mountPath: /etc/jobs
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 600
      - name: sync-pr
        image: zengchen1024/sync-pr:v20200228-31c76new10
        imagePullPolicy: Always
        args:
        - --dry-run=false
        - --port=9999
        - --github-token-path=/etc/github/oauth
        ports:
          - name: http
            containerPort: 9999
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: gitee
          mountPath: /etc/gitee
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
      - name: close-pr
        image: zengchen1024/close-pr:v20200228-31c76new1
        imagePullPolicy: Always
        args:
        - --dry-run=false
        - --port=10000
        - --github-token-path=/etc/github/oauth
        ports:
          - name: http
            containerPort: 10000
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
      volumes:
      - name: hmac
        secret:
          secretName: hmac-token
      - name: oauth
        secret:
          secretName: oauth-token
      - name: gitee
        secret:
          secretName: gitee-token
      - name: config
        configMap:
          name: common-config
      - name: plugins
        configMap:
          name: github-plugins
      - name: job
        configMap:
          name: github-jobs
---
apiVersion: v1
kind: Service
metadata:
  namespace: prow
  name: hook
spec:
  selector:
    app: hook
  ports:
  - port: 8888
  type: NodePort
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: prow
  name: plank
  labels:
    app: plank
spec:
  selector:
    matchLabels:
      app: plank
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: plank
    spec:
      serviceAccountName: "plank"
      containers:
      - name: plank
        image: zengchen1024/plank:v20200228-31c76new3
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        - --github-token-path=/etc/github/oauth
        - --skip-report=true
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: common-config
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: prow
  name: sinker
  labels:
    app: sinker
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sinker
    spec:
      serviceAccountName: "sinker"
      containers:
        - name: sinker
          image: tommylike/sinker:v20190625-9f02db3fe
          args:
            - --config-path=/etc/config/config.yaml
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: deck
  labels:
    app: deck
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: deck
  template:
    metadata:
      labels:
        app: deck
    spec:
      serviceAccountName: "deck"
      terminationGracePeriodSeconds: 30
      containers:
      - name: deck
        image: zengchen1024/deck:v20200228-31c76new4
        args:
        - --config-path=/etc/config/config.yaml
        - --plugin-config=/etc/plugins/plugins.yaml
        - --tide-url=http://tide/
        - --hook-url=http://hook:8888/plugin-help
        - --github-token-path=/etc/github/oauth
        - --s3-credentials-file=/etc/s3/service-account.json
        - --spyglass=true
        ports:
          - name: http
            containerPort: 8080
        volumeMounts:
        - name: s3
          mountPath: /etc/s3
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 600
      volumes:
      - name: s3
        secret:
          secretName: s3-credentials
      - name: config
        configMap:
          name: common-config
      - name: oauth
        secret:
          secretName: oauth-token
      - name: plugins
        configMap:
          name: github-plugins
---
apiVersion: v1
kind: Service
metadata:
  namespace: prow
  name: deck
spec:
  selector:
    app: deck
  ports:
  - port: 80
    targetPort: 8080
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: prow
  name: horologium
  labels:
    app: horologium
spec:
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: horologium
    spec:
      serviceAccountName: "horologium"
      terminationGracePeriodSeconds: 30
      containers:
        - name: horologium
          image: tommylike/horologium:v20190625-9f02db3fe
          args:
            - --config-path=/etc/config/config.yaml
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: config

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: prow
  name: tide
  labels:
    app: tide
spec:
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: tide
    spec:
      serviceAccountName: "tide"
      containers:
        - name: tide
          image: tommylike/tide:v20190625-9f02db3fe
          args:
            - --dry-run=false
            - --config-path=/etc/config/config.yaml
          ports:
            - name: http
              containerPort: 8888
          volumeMounts:
            - name: oauth
              mountPath: /etc/github
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: oauth
          secret:
            secretName: oauth-token
        - name: config
          configMap:
            name: config
---
apiVersion: v1
kind: Service
metadata:
  namespace: prow
  name: tide
spec:
  selector:
    app: tide
  ports:
    - port: 80
      targetPort: 8888
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/elb.autocreate: '{"type":"public","bandwidth_name":"cce-bandwidth-1585620583223","bandwidth_chargemode":"bandwidth","bandwidth_size":5,"bandwidth_sharetype":"PER","eip_type":"5_bgp"}'
    kubernetes.io/elb.eip-id: 934c0c7d-eb79-49c3-8eb7-c2d53f34cc73
    kubernetes.io/elb.id: 99d02a9b-71ed-43c2-8c07-6a8523433254
    kubernetes.io/elb.ip: 119.8.35.238
    kubernetes.io/elb.port: "80"
    kubernetes.io/elb.subnet-id: cbabc2a6-3aba-4ae8-a896-eb7d94bbe87c
    kubernetes.io/ingress.class: cce
  labels:
    isExternal: "true"
    zone: data
  name: prow
  namespace: prow
spec:
  rules:
    - host: dev-prow.mindspore.cn
      http:
        paths:
          - backend:
              serviceName: deck
              servicePort: 80
            path: /
            property:
              ingress.beta.kubernetes.io/url-match-mode: STARTS_WITH
          - backend:
              serviceName: hook
              servicePort: 8888
            path: /hook
            property:
              ingress.beta.kubernetes.io/url-match-mode: STARTS_WITH
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: statusreconciler
  namespace: prow
  labels:
    app: statusreconciler
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: statusreconciler
    spec:
      serviceAccountName: statusreconciler
      terminationGracePeriodSeconds: 180
      containers:
        - name: statusreconciler
          image: tommylike/status-reconciler:v20190625-9f02db3fe
          args:
            - --dry-run=false
            - --continue-on-error=true
            - --plugin-config=/etc/plugins/plugins.yaml
            - --config-path=/etc/config/config.yaml
            - --github-token-path=/etc/github/oauth
          volumeMounts:
            - name: oauth
              mountPath: /etc/github
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: plugins
              mountPath: /etc/plugins
              readOnly: true
      volumes:
        - name: oauth
          secret:
            secretName: oauth-token
        - name: config
          configMap:
            name: config
        - name: plugins
          configMap:
            name: plugins
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: prow
  name: "deck"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "deck"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "deck"
subjects:
- kind: ServiceAccount
  name: "deck"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow-pods
  name: "deck"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "deck"
subjects:
- kind: ServiceAccount
  name: "deck"
  namespace: prow
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "deck"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - list
      - watch
      # Required when deck runs with `--rerun-creates-job=true`
      # **Warning:** Only use this for non-public deck instances, this allows
      # anyone with access to your Deck instance to create new Prowjobs
      # - create
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow-pods
  name: "deck"
rules:
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: prow
  name: "horologium"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "horologium"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "horologium"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "horologium"
subjects:
  - kind: ServiceAccount
    name: "horologium"
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: prow
  name: "plank"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "plank"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - create
      - list
      - update
      - patch
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow-pods
  name: "plank"
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - delete
      - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "plank"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "plank"
subjects:
- kind: ServiceAccount
  name: "plank"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow-pods
  name: "plank"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "plank"
subjects:
- kind: ServiceAccount
  name: "plank"
  namespace: prow
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: prow
  name: "sinker"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "sinker"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - delete
      - list
      - watch
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - prow-sinker-leaderlock
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
      - events
    verbs:
      - create
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow-pods
  name: "sinker"
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "sinker"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "sinker"
subjects:
  - kind: ServiceAccount
    name: "sinker"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow-pods
  name: "sinker"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "sinker"
subjects:
  - kind: ServiceAccount
    name: "sinker"
    namespace: prow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prow
  name: "hook"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "hook"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - get
      - update
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "hook"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "hook"
subjects:
- kind: ServiceAccount
  name: "hook"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prow
  name: "tide"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "tide"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
      - get
      - watch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "tide"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "tide"
subjects:
  - kind: ServiceAccount
    name: "tide"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prow
  name: "statusreconciler"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "statusreconciler"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "statusreconciler"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "statusreconciler"
subjects:
  - kind: ServiceAccount
    name: "statusreconciler"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: jenkins-operator
  labels:
    app: jenkins-operator
spec:
  selector:
    matchLabels:
      app: jenkins-operator
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jenkins-operator
    spec:
      serviceAccountName: "jenkins-operator"
      containers:
      - name: jenkins-operator
        image: zengchen1024/jenkins-operator:v20200228-31c76new11
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        - --github-token-path=/etc/github/oauth
        - --skip-report=true
        - --jenkins-url=https://build.openlookeng.org
        - --jenkins-user=admin
        - --jenkins-token-file=/etc/jenkins/token
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: jenkins
          mountPath: /etc/jenkins
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: jenkins
        secret:
          secretName: jenkins-token
      - name: config
        configMap:
          name: common-config
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: prow
  name: "jenkins-operator"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "jenkins-operator"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - create
      - list
      - update
      - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "jenkins-operator"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "jenkins-operator"
subjects:
- kind: ServiceAccount
  name: "jenkins-operator"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: job-reporter
  labels:
    app: job-reporter
spec:
  selector:
    matchLabels:
      app: job-reporter
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: job-reporter
    spec:
      serviceAccountName: "job-reporter"
      containers:
      - name: job-reporter
        image: zengchen1024/job-reporter:v20200228-31c76new15
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        - --github-token-path=/etc/github/oauth
        - --gitee-token-path=/etc/gitee/oauth
        - --github-workers=1
        - --gitee-workers=1
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: gitee
          mountPath: /etc/gitee
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: gitee
        secret:
          secretName: gitee-token
      - name: config
        configMap:
          name: common-config
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: prow
  name: "job-reporter"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "job-reporter"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - create
      - list
      - update
      - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "job-reporter"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "job-reporter"
subjects:
- kind: ServiceAccount
  name: "job-reporter"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: gitee-tide
  labels:
    app: gitee-tide
spec:
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: gitee-tide
  template:
    metadata:
      labels:
        app: gitee-tide
    spec:
      serviceAccountName: "gitee-tide"
      containers:
      - name: gitee-tide
        image: zengchen1024/gitee-tide:v20200228-31c76new12
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/job/config.yaml
        - --s3-credentials-file=/etc/s3/service-account.json
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: s3
          mountPath: /etc/s3
          readOnly: true
        - name: oauth
          mountPath: /etc/gitee
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: job
          mountPath: /etc/job
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: gitee-token
      - name: config
        configMap:
          name: gitee-tide
      - name: job
        configMap:
          name: gitee-jobs
      - name: s3
        secret:
          secretName: s3-credentials
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prow
  name: "gitee-tide"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "gitee-tide"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
      - get
      - watch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: prow
  name: "gitee-tide"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "gitee-tide"
subjects:
- kind: ServiceAccount
  name: "gitee-tide"
